{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[201],{337:function(t,s,a){\"use strict\";a.r(s);var n=a(0),o=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"content\"},[t._m(0),a(\"p\",[t._v(\"Daily Codewars #31\")]),t._m(1),t._m(2),a(\"p\",[a(\"a\",{attrs:{href:\"https://www.codewars.com/kata/55c4eb777e07c13528000021/train/javascript\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"codewars link\"),a(\"OutboundLink\")],1)]),a(\"p\",[t._v(\"How many zeroes are at the end of the factorial of 10? 10! = 3628800, i.e. there are 2 zeroes. 16! in hexadecimal would be 0x130777758000, which has 3 zeroes.\")]),t._m(3),a(\"p\",[t._v(\"Unfortunately, machine integer numbers has not enough precision for larger values. Floating point numbers drop the tail we need. We can fall back to arbitrary-precision ones - built-ins or from a library, but calculating the full product isn't an efficient way to find just the tail of a factorial. Calculating 100'000! in compiled language takes around 10 seconds. 1'000'000! would be around 10 minutes, even using efficient Karatsuba algorithm\")]),t._m(4),a(\"p\",[t._v(\"is to write a function, which will find the number of zeroes at the end of (number) factorial in arbitrary radix = base for larger numbers.\")]),t._m(5),t._m(6),t._m(7),a(\"p\",[t._v(\"내가 계속 실마리를 못 잡으니 힌트를 주셨다.\")]),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),a(\"p\",[t._v(\"그래서 base용, number용 소인수 구하는 함수를 나눴다.\\n굳이 하면 합칠 수 있겠는데... 이 때는 쫄보라서 최대한 속도 높이려고 함수 분리했음 흐훅\")]),t._m(18),t._m(19),a(\"p\",[t._v(\"이럴 줄 알았어... 남들은 엄청 짧은 코드로 풀 줄...\")]),t._m(20),t._m(21),a(\"p\",[t._v(\"멍충 인증\")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s(\"h1\",{attrs:{id:\"일일코딩-31-fatorial-tail\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#일일코딩-31-fatorial-tail\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" [일일코딩 #31] Fatorial tail\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"question\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#question\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Question\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"blockquote\",[s(\"p\",[this._v(\"자연수 a의 팩토리얼 수를 b진수로 고쳤을 때 뒤에 0이 얼마나 붙는지 구하는 질문이다. 4kyu짜리 문제.\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"code\",[this._v(\"<Scalability>\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[s(\"code\",[this._v(\"<Your task>\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"ul\",[s(\"li\",[this._v(\"base is an integer from 2 to 256\")]),s(\"li\",[this._v(\"number is an integer from 1 to 1'000'000\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"비하인드-스토리\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#비하인드-스토리\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 비하인드 스토리\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"점심 먹고 잠도 깰 겸 코드워즈를 틀었다. 처음엔 별 고민 없이 \"),s(\"code\",[this._v(\"숫자.toString(몇진수)\")]),this._v(\"가 큰 수에서 overflow나길래 \"),s(\"code\",[this._v(\"toString\")]),this._v(\" 없이 N진수로 고치는 코드를 짰다. 근데 그런 문제가 아니었음. \"),s(\"code\",[this._v(\"50 팩토리얼\")]),this._v('만 해도 콤퓨타에서 저장할 수 없으니... (팩토리얼로 변환가능해야 하는 범위는 100만까지다).\\n회사 옆자리 동료분께 \"50!를 2진수로 바꿨을 때 뒤에 0이 얼마나 붙어요?\" 여쭤보니 그건 수학 문제에 더 가깝고, ACM(대학생 프로그래밍 경시대회) 1번 문제 난이도라고 하였다(다른 분께선 그건 아니고 예선문제 정도 레베루라고...).')])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"blockquote\",[s(\"p\",[this._v(\"h: 0의 의미를 생각해보세요\\n나: ...\\nh: 50!를 10진수로 바꿨을 때 뒤에 0이 붙는 경우를 생각해보세요\")])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"my-answer\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#my-answer\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" My Answer\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"p\",[t._v(\"알아내따! 정말 실마리는 0의 의미에 있었다.\\n팩토리얼을 풀어해쳤을 때, \"),a(\"code\",[t._v(\"8!\")]),t._v(\"는 \"),a(\"code\",[t._v(\"8*7*6*5*4*3*2*1\")]),t._v(\" 이다. 10진수가 0으로 끝나려면 \"),a(\"code\",[t._v(\"2A * 5B\")]),t._v(\"나 \"),a(\"code\",[t._v(\"10C\")]),t._v(\"가 저 안에 있으면 되지 않을까?\\n그럼 n진수 뒤의 0은 \"),a(\"code\",[t._v(\"number\")]),t._v(\"(팩토리얼 당하는 수)를 풀어해친 수 속에 얼마나 \"),a(\"code\",[t._v(\"base\")]),t._v(\"(진수)가 들어있는지 찾으면 되는구나.\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"처음엔 \"),s(\"code\",[this._v(\"number\")]),this._v(\"를 무작정 \"),s(\"code\",[this._v(\"base\")]),this._v(\"로 나눠갔다. 당연히 또 overflow가 났다. 나머지를 계속 곱하면서 저장하니 당연히...\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-javascript extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"zeroes\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"base\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" number\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" answer \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" remain \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" number\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"--\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" newI \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    newI \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"*=\")]),t._v(\" remain\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 나누고 난 나머지는 계속 곱해둠 -> overflow 원흉\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"newI\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"%\")]),t._v(\"base \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 나눠 떨어지면 answer를 증가시킴\")]),t._v(\"\\n      answer\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n      newI \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Math\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"floor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"newI\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"base\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    remain \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" newI\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" answer\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"그 다음은 \"),s(\"code\",[this._v(\"base\")]),this._v(\"와 \"),s(\"code\",[this._v(\"number\")]),this._v(\" 모두 소인수분해를 해서 이를 비교해보았다. 소인수분해 함수를 만들어서 돌려 썼다.\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-javascript extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"zeroes\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"base\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" number\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"makePrime\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" obj\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 소인수분해 하는 함수\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<=\")]),t._v(\" num\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" quantity \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"while\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"%\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        quantity\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        num \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Math\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"floor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"quantity\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\">\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" originVal \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" obj\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        obj\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" originVal\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"?\")]),t._v(\" originVal \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" quantity \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" quantity\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" obj\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" basePrime \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"makePrime\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"base\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" numberPrime \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" number\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\">=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"--\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 팩토리얼 for문 돌며 공용 object에 인수를 집어넣는다\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"makePrime\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" numberPrime\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" answer \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" answerList \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" baseLength \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"keys\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"basePrime\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" baseLength\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// 소인수분해한 두 object 비교\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" oName \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"keys\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"basePrime\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"numberPrime\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"oName\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n      answer \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"break\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" result \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Math\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"floor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"numberPrime\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"oName\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\" basePrime\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"oName\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    answerList\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"push\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"result\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" Math\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"min\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"apply\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"null\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" answerList\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"이 함수의 문제점은 \"),s(\"code\",[this._v(\"zeroes(2, 524288)\")]),this._v(\"정도로 팩토리얼 할 수가 커지면 연산이 터지는 것이었다.\\n\"),s(\"code\",[this._v(\"zeroes(2, 100000)\")]),this._v(\"크기의 연산도 \"),s(\"code\",[this._v(\"4.8s\")]),this._v(\"나 걸린다.\\n자잘한 성능 최적화로는 안되고 연산 자체를 토막내야 되겠네...\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"더 생각해보니 \"),s(\"code\",[this._v(\"number\")]),this._v(\"의 소인수를 굳이 모두 구할 필요 없이 \"),s(\"code\",[this._v(\"base\")]),this._v(\"의 소인수로만 연산하면 되는거였다. base는 범위도 256까지밖에 안 된다. (e.g. base 소인수가 \"),s(\"code\",[this._v(\"{2:2, 3:5}\")]),this._v(\"라면 number에서 2와 3의 갯수만 구하기)\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"zeroes\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"base\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" number\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"makePrime\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" obj\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// base용 소인수분해\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<=\")]),t._v(\" num\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" quantity \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"while\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"%\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        quantity\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        num \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Math\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"floor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"quantity\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\">\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" originVal \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" obj\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        obj\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" quantity\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" obj\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"makePrimeArray\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" obj\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" arr\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// number용 소인수분해: base의 키값만 돌며 인수를 구한다\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" length \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" arr\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\" length\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" arrKey \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" arr\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" quantity \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"while\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\">\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\" num\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"%\")]),t._v(\"arrKey\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"===\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        quantity\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        num \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Math\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"floor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"num\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"arrKey\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"quantity\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\">\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" originVal \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" obj\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"arrKey\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n        obj\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"arrKey\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" originVal\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"?\")]),t._v(\" originVal \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" quantity \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" quantity\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n      \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" obj\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" basePrime \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"makePrime\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"base\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n      numberPrime \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n      basePrimeArr \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"keys\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"basePrime\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n      answer \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"Infinity\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n      answerList \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n      baseLength \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"keys\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"basePrime\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"length\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" number\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\">=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"--\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"makePrimeArray\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" numberPrime\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" basePrimeArr\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" prop \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"in\")]),t._v(\" basePrime\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    answer \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Math\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"min\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"answer\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" Math\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"floor\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"numberPrime\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"prop\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\" basePrime\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"prop\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"|\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" answer\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"p\",[this._v(\"이렇게 바꿨더니 기존에 연산 죽던 \"),s(\"code\",[this._v(\"524288\")]),this._v(\"이 0.2s만에 계산되더라. 오예!\")])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"pompeu2004-s-solution\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#pompeu2004-s-solution\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" pompeu2004's Solution\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"language-javascript extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"zeroes\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"base\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" number\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" factors \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"while\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"++\")]),t._v(\"i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<=\")]),t._v(\" base\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"while\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"base\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"%\")]),t._v(\"i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    base \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"/=\")]),t._v(\" i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \\n    factors\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"factors\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"||\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" Math\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"min\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"...\")]),t._v(\"Object\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"keys\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"factors\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"map\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"factor \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=>\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" count \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"while\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"i \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"*=\")]),t._v(\" factor\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"<=\")]),t._v(\" number\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" count \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"+=\")]),t._v(\" number\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"i\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\">>\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" count\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"factors\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"factor\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\">>\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s(\"h2\",{attrs:{id:\"결론\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#결론\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 결론\")])}],!1,null,null,null);s.default=o.exports}}]);","extractedComments":[]}