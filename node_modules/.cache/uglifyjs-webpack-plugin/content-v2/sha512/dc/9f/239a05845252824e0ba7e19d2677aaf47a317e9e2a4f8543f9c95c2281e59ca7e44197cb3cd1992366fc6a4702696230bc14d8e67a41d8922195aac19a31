{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{178:function(t,s,a){\"use strict\";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"div\",{staticClass:\"content\"},[a(\"h2\",{attrs:{id:\"question\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#question\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" Question\")]),a(\"p\",[t._v(\"http://www.codewars.com/kata/534d0a229345375d520006a0/train/javascript\\nWrite a function that determines if given number is a power of two. A power of two means a number of the form 2^n where n is an integer, i.e. the result of exponentiation with number two as the base and integer n as the exponent. I.e. 1024 is a power of two: it 2^10.\")]),a(\"div\",{staticClass:\"language-javascript extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isPowerOfTwo\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"4096\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// -> true\")]),t._v(\"\\n\\n\"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isPowerOfTwo\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"333\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"  \"),a(\"span\",{attrs:{class:\"token comment\"}},[t._v(\"// -> false\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"Pay attention: hidden tests are using extremmely big numbers\")]),a(\"h2\",{attrs:{id:\"my-solution\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#my-solution\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" My Solution\")]),a(\"div\",{staticClass:\"language-javascript extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isPowerOfTwo\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"true\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\" \\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"if\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"%\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token boolean\"}},[t._v(\"false\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"else\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isPowerOfTwo\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"/\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"blockquote\",[a(\"p\",[t._v(\"처음엔 재귀함수를 돌 때 앞에 \"),a(\"code\",[t._v(\"return\")]),t._v(\"을 쓰지 않으니\\n마지막에 불리우는 \"),a(\"code\",[t._v(\"return\")]),t._v(\"문에서 함수를 빠져나가는게 아니라 재귀함수를 빠져나가버렸다.\\n그래서 계속 \"),a(\"code\",[t._v(\"undefined\")]),t._v(\"가 나왔다.\")])]),a(\"h2\",{attrs:{id:\"binarypanda-s-solution\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#binarypanda-s-solution\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" @BinaryPanda 's Solution\")]),a(\"div\",{staticClass:\"language-javascript extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isPowerOfTwo\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" n \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"&&\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"!\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"&\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"blockquote\",[a(\"p\",[t._v(\"이진법 연산이다. 이런 사람들 보면 내가 미워진다.\")])]),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"For example: \\n 1 is 000001\\n 2 is 000010\\n 4 is 000100\\n 8 is 001000\\n16 is 010000\\n32 is 100000\\n\")])])]),a(\"p\",[t._v(\"So, we need a way to verify that only a single digit is set. A bitwise and (the single &) will compare the digits in the positions they are in. So 10 & 01 is 00, but 11 & 10 is 10. Only if both spots contain a 1, does the result contain a 1.\")]),a(\"p\",[t._v(\"If a number is a power of two, subtracting one will result in something like this:\")]),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"8 = 001000\\n7 = 000111\\n\")])])]),a(\"p\",[t._v(\"7 & 8 will be 0, because they share no 1's in the same spot. Then by using a !, we invert the answer.\")]),a(\"p\",[t._v(\"What if the number is not a power of two? Like what about 7?\")]),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"7 = 000111\\n6 = 000110\\n7 & 6 = 000110 (6)\\n\")])])]),a(\"h2\",{attrs:{id:\"pandacoder-s-solution\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#pandacoder-s-solution\",\"aria-hidden\":\"true\"}},[t._v(\"#\")]),t._v(\" @PandaCoder's Solution\")]),a(\"div\",{staticClass:\"language-javascript extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"isPowerOfTwo\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" Math\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"Math\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{attrs:{class:\"token function\"}},[t._v(\"log\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"2\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"%\")]),t._v(\" \"),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"1\")]),a(\"span\",{attrs:{class:\"token operator\"}},[t._v(\"==\")]),a(\"span\",{attrs:{class:\"token number\"}},[t._v(\"0\")]),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])])}],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}